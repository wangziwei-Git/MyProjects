<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:dubbo="http://code.alibabatech.com/schema/dubbo"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:security="http://www.springframework.org/schema/security"
       xmlns:cecurity="http://www.springframework.org/schema/security"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
                  http://www.springframework.org/schema/beans/spring-beans.xsd
                  http://www.springframework.org/schema/mvc
                  http://www.springframework.org/schema/mvc/spring-mvc.xsd
                  http://code.alibabatech.com/schema/dubbo
                  http://code.alibabatech.com/schema/dubbo/dubbo.xsd
                  http://www.springframework.org/schema/context
                  http://www.springframework.org/schema/context/spring-context.xsd
                          http://www.springframework.org/schema/security
                          http://www.springframework.org/schema/security/spring-security.xsd">


    <!--指定页面:2.开启匿名访问不然不能访问-->
    <security:http security="none" pattern="/login.html"/>

    <!--匿名访问-->
    <security:http security="none" pattern="/js/**"/>
    <security:http security="none" pattern="/css/**"/>
    <security:http security="none" pattern="/img/**"/>
    <!--<security:http security="none" pattern="/plugins/**"/>-->



    <!--1：定义哪些链接可以放行-->
    <!--
        2：定义哪些链接不可以放行，即需要有角色、权限才可以放行(配置拦截器规则)
        http：用于定义相关权限控制
        auto-config：是否自动配置
                        设置为true时框架会提供默认的一些配置，例如提供默认的登录页面、登出处理等
                        设置为false时需要显示提供登录表单配置，否则会报错
        use-expressions：用于指定intercept-url中的access属性是否使用表达式
    -->
    <security:http auto-config="true" use-expressions="true">
        <!--===================================基于配置文件权限控制=================================-->
        <!--&lt;!&ndash;只要认证通过就可以访问&ndash;&gt;-->
        <!--<security:intercept-url pattern="/index.html" access="isAuthenticated()"/>-->
        <!--<security:intercept-url pattern="/a.html" access="isAuthenticated()"/>-->

        <!--&lt;!&ndash;拥有add权限就可以访问b.html&ndash;&gt;-->
        <!--<security:intercept-url pattern="/b.html" access="hasAuthority('add')"/>-->

        <!--&lt;!&ndash;拥有ROLE_ADMIN角色就 可以访问c.html页面，-->
             <!--注意：此处虽然写的是ADMIN角色，框架会自动加上前缀ROLE_-->
		        <!--如果加了hasRole在权限中的格式必须是Role_权限&ndash;&gt;-->
        <!--<security:intercept-url pattern="/c.html" access="hasRole('ADMIN')"/>-->

        <!--&lt;!&ndash;拥有ROLE_ADMIN角色就可以访问d.html页面&ndash;&gt;-->
        <!--<security:intercept-url pattern="/d.html" access="hasRole('ABC')"/>-->

        <!--===================================基于配置文件结尾=================================-->




        <!--
            intercept-url：定义一个拦截规则
            pattern：对哪些url进行权限控制
        -->
        <security:intercept-url pattern="/**"  access="hasRole('ROLE_ADMIN')" />

        <!--
  form-login：定义表单登录信息
            login-page="/login.html"：表示指定登录页面
            username-parameter="username"：使用登录名的名称，默认值是username
            password-parameter="password"：使用登录名的密码，默认值是password
            login-processing-url="/login.do"：表示登录的url地址
            default-target-url="/index.html"：登录成功后默认跳转的url地址
            authentication-failure-url="/login.html"：认证(登录)失败后跳转的url地址，失败后指定/login.html
            always-use-default-target="true"：登录成功后，始终跳转到default-target-url指定的地址，即登录成功的默认地址
-->
        <security:form-login login-page="/login.html"
                             username-parameter="username"
                             password-parameter="password"
                             login-processing-url="/login.do"
                             default-target-url="/index.html"
                             authentication-failure-url="/login.html"
                             always-use-default-target="true"
        />

        <!--
            csrf：对应CsrfFilter过滤器
            disabled：是否启用CsrfFilter过滤器，如果使用自定义登录页面需要关闭此项，否则登录操作会被禁用（403）
        -->
        <security:csrf disabled="true"></security:csrf>

        <!--
           logout：退出登录
           logout-url：退出登录操作对应的请求路径
           logout-success-url：退出登录后的跳转页面
        -->
        <security:logout logout-url="/logout.do" logout-success-url="/login.html" invalidate-session="true"/>
    </security:http>




    <!--
         3：认证管理，定义登录账号名和密码，并授予访问的角色、权限
         authentication-manager：认证管理器，用于处理认证操作
     -->
    <security:authentication-manager>
        <!--
            authentication-provider：认证提供者，执行具体的认证逻辑
        -->
        <security:authentication-provider user-service-ref="userService">

            <!--指定加密策略-->
            <cecurity:password-encoder ref="passwordEncoder"></cecurity:password-encoder>

            <!--===================================写死的用户开始=================================-->
            <!--
                user-service：用于获取用户信息，提供给authentication-provider进行认证
            -->
            <!--<security:user-service >-->
                <!--
					账号,密码,权限
                    user：定义用户信息，可以指定用户名、密码、角色，后期可以改为从数据库查询用户信息
              		{noop}：表示当前使用的密码为明文(不要就是默认加密)
					authorities:给改用户授权(设置权限)
                -->
                <!--<security:user name="admin" password="{noop}123" authorities="ROLE_ADMIN"/>-->
            <!--</security:user-service>-->
            <!--===================================写死的用户结束=================================-->

        </security:authentication-provider>
    </security:authentication-manager>

    <!--配置密码加密对象-->
    <bean id="passwordEncoder" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder"/>

    <!--===================================基于注解文件开始=================================-->
    <!--开启注解方式权限控制-->
    <security:global-method-security pre-post-annotations="enabled" />
    <!--包扫描-->
    <context:component-scan base-package="com.itheima"/>
    <!--组件扫描-->
    <mvc:annotation-driven></mvc:annotation-driven>
    <!--===================================基于注解文件结束=================================-->



</beans>